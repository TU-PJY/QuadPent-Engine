//////////////////////  cpp

#include "Mode1.h"
#include "Framework.h"
#include "MouseUtil.h"

void Mode1::Start() {

	framework.RegisterController(Controller, MODE_TYPE_DEFAULT);
	framework.RegisterDestructor(Destructor);
	framework.RegisterModeName("GameMode1");
}

void Mode1::Destructor() {

}

void Mode1::ProcessKeyboard(int Type, int State, unsigned char NormalKey, int SpecialKey) {
}

void Mode1::ProcessMouse(int Button, int State, int X, int Y) {
}

void Mode1::ProcessMouseWheel(int Button, int Wheel, int X, int Y) {
}



void Mode1::KeyDown(unsigned char KEY, int X, int Y) {
	ProcessKeyboard(KEY_TYPE_NORMAL, KEY_DOWN, KEY, NULL);
}

void Mode1::KeyUp(unsigned char KEY, int X, int Y) {
	ProcessKeyboard(KEY_TYPE_NORMAL, KEY_UP, KEY, NULL);
}

void Mode1::SpecialKeyDown(int KEY, int X, int Y) {
	ProcessKeyboard(KEY_TYPE_SPECIAL, KEY_DOWN, NULL, KEY);
}

void Mode1::SpecialKeyUp(int KEY, int X, int Y) {
	ProcessKeyboard(KEY_TYPE_SPECIAL, KEY_UP, NULL, KEY);
}

void Mode1::MouseMotion(int X, int Y) {
	mouse.ConvertPosition(X, Y);
}

void Mode1::MousePassiveMotion(int X, int Y) {
	mouse.ConvertPosition(X, Y);
}

void Mode1::Controller() {
	glutMotionFunc(MouseMotion);
	glutPassiveMotionFunc(MousePassiveMotion);
	glutKeyboardFunc(KeyDown);
	glutKeyboardUpFunc(KeyUp);
	glutMouseWheelFunc(ProcessMouseWheel);
	glutMouseFunc(ProcessMouse);
	glutSpecialFunc(SpecialKeyDown);
	glutSpecialUpFunc(SpecialKeyUp);
}



////////////////////// header

#pragma once
#include "EngineHeader.h"

namespace Mode1 {
	void Start();
	void Destructor();

	void ProcessKeyboard(int Type, int State, unsigned char NormalKey, int SpecialKey);
	void ProcessMouse(int Button, int State, int X, int Y);
	void ProcessMouseWheel(int Button, int Wheel, int X, int Y);
	void KeyDown(unsigned char KEY, int X, int Y);
	void KeyUp(unsigned char KEY, int X, int Y);
	void SpecialKeyUp(int KEY, int X, int Y);
	void SpecialKeyDown(int KEY, int X, int Y);
	void MouseMotion(int X, int Y);
	void MousePassiveMotion(int X, int Y);
	void Controller();
}